input {
    beats {
        port => "5043"
        ssl => true
        ssl_certificate => "/etc/logstash/tls/public.pem"
        ssl_key => "/etc/logstash/tls/private.pem"
    }
    tcp {
        port => "5044"
        ssl_enable => true
        ssl_verify => false
        ssl_cert => "/etc/logstash/tls/public.pem"
        ssl_key => "/etc/logstash/tls/private.pem"
        codec => json_lines
        type => "systemd"
    }
}

filter {
    if [type] == "cron" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" }
        }
        if [program] == "CROND" or [program] == "crontab" {
            grok {
                match => { "syslog_message" => "\(%{USER:cron_user}\) %{GREEDYDATA:cron_event} \((?<cron_detail>.*)\)"}
            }
            if [cron_event] == "CMD" {
                grok {
                    match =>  { "cron_detail" => "^%{PATH:cron_command}" }
                }
            }
        }
    }
}
filter {
    if [type] == "kubernetes" {
        json {
            source => "message"
        }
    }
}
filter {
    if [type] == "ntp" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" }
            tag_on_failure => ["badntp"]
            patterns_dir => "/etc/logstash/patterns"
        }
        grok {
            match => ["message", "%{IP:ntp_ip} (?<ntp_state>\w+) (?<ntp_event_code>\w+) (?<ntp_event>\w+)"]
            tag_on_failure => []
        }
    }
}
filter {
    if [type] == "selinux" {
        grok {
            break_on_match => false
            match => { "message" => ["%{AUDITAVC}",
                                     "%{AUDIT}"] }
            patterns_dir => "/etc/logstash/patterns"
            add_tag => ["selinux_audit"]
        }

        # kv ends up putting all of the secondary "msg" in one var, so need to
        # look for the value of "audit_%{[audit_type]}_msg" and kv on it as well.

        # avc has the 'denied { interestingbit }' thats not kv, so different tool
        if [selinux_type] == "AVC" {
            kv { prefix => "selinux_avc_"
                 source => selinux_avc_message
               }
        } else {
            mutate {
                lowercase => [ "selinux_type" ]
            }
            kv { 
                prefix => "selinux_"
                source => selinux_message
            }
            if [selinux_msg] {
                kv {
                    prefix => "selinux_%{[selinux_type]}_"
                    source => selinux_msg
                }
            }
        }

        # Pull date from selinux timestamp
        date {
            match => [ "selinux_epoch", "UNIX" ]
            remove_field => [ "selinux_epoch" ]
        }
    }
}
filter {
    if [type] == "syslog" {
        if [source] == "/var/log/krb5kdc.log" {
            # for some reason, the krb5kdc logs include a log level after the program
            grok {
                match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}\((?<level>\w+)\): %{GREEDYDATA:syslog_message}" }
            }
        } else {
            grok {
                match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" }
            }
        }
    } else if [type] == "systemd" {
        mutate {
            rename => ["_HOSTNAME", "logsource"]
            rename => ["SYSLOG_IDENTIFIER", "program"]
            rename => ["_PID", "pid"]
            rename => ["MESSAGE", "syslog_message"]
        }
    }

    if [type] == "syslog" or [type] == "systemd" {
        if [pid] {
            mutate {
                convert => [ "pid", "integer" ]
            }
        }

        if [program] == "auth" {
            grok {
                patterns_dir     => "/etc/logstash/patterns"
                match            => { "syslog_message" => "%{PAMLOG}" }
                add_tag          => [ "_grok_pam_success" ]
            }

            if [pam_message] =~ /^authentication failure/ {
                kv {
                    source       => "pam_message"
                    include_keys => [ "rhost", "tty", "user" ]
                }

                mutate {
                    rename       => { "rhost" => "clientip" }
                    rename       => { "user"  => "attempted_user" }
                    add_tag      => [ "failed_login", "pam" ]
                }
            }
        } else if [program] == "dovecot" {
            grok {
                match           => { "syslog_message" => "%{DATA:dovecot_process}: %{DATA:dovecot_message}: %{GREEDYDATA:dovecot_keyvalue_data}" }
            }

            if [dovecot_process] =~ /^imap\(/ {
                grok {
                    match        => { "dovecot_process" => "imap\(%{USERNAME:user}\)" }
                }
            }

            if [dovecot_keyvalue_data] {
                kv {
                    source       => "dovecot_keyvalue_data"
                    trim         => "<>,"
                    prefix       => "dovecot_"
                    remove_field => [ "dovecot_keyvalue_data" ]
                }

                mutate {
                    rename      => { "dovecot_rip" => "clientip" }
                }

                if [dovecot_message] == "Login" {
                    mutate {
                        rename  => { "dovecot_user" => "user" }
                        add_tag => [ "login" ]
                    }
                }
            }
        } else if [program] == "wuvt-site" {
            grok {
                match          => { "syslog_message" => "LDAP user %{USERNAME:user} logged in from %{IP:clientip} using %{GREEDYDATA:agent}" }
                add_tag        => [ "login" ]
                tag_on_failure => []
            }
            grok {
                match          => { "syslog_message" => "Failed login for LDAP user %{USERNAME:attempted_user} from %{IP:clientip} using %{GREEDYDATA:agent}" }
                add_tag        => [ "failed_login" ]
                tag_on_failure => []
            }
        } else if [program] == "kibana" {
            json {
                source         => "syslog_message"
                add_tag        => [ "_parse_kibana_success" ]
            }
        } else if [program] == "krb5kdc" {
            grok {
                match          => { "syslog_message" => "%{KDC_LOG}" }
                patterns_dir   => "/etc/logstash/patterns"
            }
        } else if [program] =~ /^postfix/ {
            # This is found https://raw.githubusercontent.com/whyscream/postfix-grok-patterns/master/50-filter-postfix.conf
            # grok log lines by program name (listed alpabetically)
            if [program] =~ /^postfix.*\/anvil$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_ANVIL}" ]
                    tag_on_failure => [ "_grok_postfix_anvil_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/bounce$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_BOUNCE}" ]
                    tag_on_failure => [ "_grok_postfix_bounce_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/cleanup$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_CLEANUP}" ]
                    tag_on_failure => [ "_grok_postfix_cleanup_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/dnsblog$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_DNSBLOG}" ]
                    tag_on_failure => [ "_grok_postfix_dnsblog_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/local$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_LOCAL}" ]
                    tag_on_failure => [ "_grok_postfix_local_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/master$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_MASTER}" ]
                    tag_on_failure => [ "_grok_postfix_master_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/pickup$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_PICKUP}" ]
                    tag_on_failure => [ "_grok_postfix_pickup_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/pipe$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_PIPE}" ]
                    tag_on_failure => [ "_grok_postfix_pipe_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/postdrop$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_POSTDROP}" ]
                    tag_on_failure => [ "_grok_postfix_postdrop_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/postscreen$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_POSTSCREEN}" ]
                    tag_on_failure => [ "_grok_postfix_postscreen_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/qmgr$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_QMGR}" ]
                    tag_on_failure => [ "_grok_postfix_qmgr_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/scache$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_SCACHE}" ]
                    tag_on_failure => [ "_grok_postfix_scache_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/sendmail$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_SENDMAIL}" ]
                    tag_on_failure => [ "_grok_postfix_sendmail_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/smtp$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_SMTP}" ]
                    tag_on_failure => [ "_grok_postfix_smtp_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/lmtp$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_LMTP}" ]
                    tag_on_failure => [ "_grok_postfix_lmtp_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/smtpd$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_SMTPD}" ]
                    tag_on_failure => [ "_grok_postfix_smtpd_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/tlsmgr$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_TLSMGR}" ]
                    tag_on_failure => [ "_grok_postfix_tlsmgr_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/tlsproxy$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_TLSPROXY}" ]
                    tag_on_failure => [ "_grok_postfix_tlsproxy_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/trivial-rewrite$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_TRIVIAL_REWRITE}" ]
                    tag_on_failure => [ "_grok_postfix_trivial_rewrite_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            } else if [program] =~ /^postfix.*\/discard$/ {
                grok {
                    patterns_dir   => "/etc/logstash/patterns"
                    match          => [ "message", "%{POSTFIX_DISCARD}" ]
                    tag_on_failure => [ "_grok_postfix_discard_nomatch" ]
                    add_tag        => [ "_grok_postfix_success" ]
                }
            }

            if [postfix_keyvalue_data] {
                kv {
                    source       => "postfix_keyvalue_data"
                    trim         => "<>,"
                    prefix       => "postfix_"
                    remove_field => [ "postfix_keyvalue_data" ]
                }

                # some post processing of key-value data
                if [postfix_client] {
                    grok {
                        patterns_dir   => "/etc/logstash/patterns"
                        match          => ["postfix_client", "%{POSTFIX_CLIENT_INFO}"]
                        tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
                        remove_field   => [ "postfix_client" ]
                    }
                }
                if [postfix_relay] {
                    grok {
                        patterns_dir   => "/etc/logstash/patterns"
                        match          => ["postfix_relay", "%{POSTFIX_RELAY_INFO}"]
                        tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
                        remove_field   => [ "postfix_relay" ]
                    }
                }
                if [postfix_delays] {
                    grok {
                        patterns_dir   => "/etc/logstash/patterns"
                        match          => ["postfix_delays", "%{POSTFIX_DELAYS}"]
                        tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
                        remove_field   => [ "postfix_delays" ]
                    }
                }
            }

            # Do some data type conversions
            mutate {
                convert => [
                    # list of integer fields
                    "postfix_anvil_cache_size", "integer",
                    "postfix_anvil_conn_count", "integer",
                    "postfix_anvil_conn_rate", "integer",
                    "postfix_client_port", "integer",
                    "postfix_nrcpt", "integer",
                    "postfix_postscreen_cache_dropped", "integer",
                    "postfix_postscreen_cache_retained", "integer",
                    "postfix_postscreen_dnsbl_rank", "integer",
                    "postfix_relay_port", "integer",
                    "postfix_server_port", "integer",
                    "postfix_size", "integer",
                    "postfix_status_code", "integer",
                    "postfix_termination_signal", "integer",
                    "postfix_uid", "integer",

                    # list of float fields
                    "postfix_delay", "float",
                    "postfix_delay_before_qmgr", "float",
                    "postfix_delay_conn_setup", "float",
                    "postfix_delay_in_qmgr", "float",
                    "postfix_delay_transmission", "float",
                    "postfix_postscreen_violation_time", "float"
                ]
            }
        } else if [program] == "Trackman" {
            grok {
                match          => { "syslog_message" => "%{DATA:dj} logged in from %{IP:clientip} using %{GREEDYDATA:agent}" }
                tag_on_failure => []
            }
            grok {
                match          => { "syslog_message" => "Automation started from %{IP:clientip} using %{GREEDYDATA:agent}" }
                tag_on_failure => []
            }

        } else if [program] == "sudo" {
            multiline {
                patterns_dir  => "/etc/logstash/patterns"
                source        => "syslog_message"
                pattern       => "^%{SUDOCONTINUEDLOG}"
                what          => "previous"
            }

            grok {
                patterns_dir  => "/etc/logstash/patterns"
                match         => { "syslog_message" => "%{SUDOLOG}" }
            }
        } else if [program] == "sshd" {
            grok {
                match => { "syslog_message" => "Accepted %{WORD:method} for %{USERNAME:user} from %{IP:clientip} port %{POSINT:port} ssh%{INT:sshver}" }
                add_tag => [ "login" ]
                tag_on_failure => []
            }
            grok {
                match => { "syslog_message" => "Failed %{WORD:method} for %{USERNAME:attempted_user} from %{IP:clientip} port %{POSINT:port} ssh%{INT:sshver}" }
                add_tag => [ "failed_login", "ssh_failed_auth" ]
                tag_on_failure => []
            }
            grok {
                match => { "syslog_message" => "Failed %{WORD:method} for invalid user %{USERNAME:attempted_user} from %{IP:clientip} port %{POSINT:port} ssh%{INT:sshver}" }
                add_tag => [ "failed_login", "ssh_failed_auth", "ssh_invalid_user" ]
                tag_on_failure => []
            }
            grok {
                match => { "syslog_message" => "pam_unix\(sshd:session\): session opened for user %{USERNAME:user} "}
                add_tag => [ "login", "pam" ]
                tag_on_failure => []
            }
            grok {
                match => { "syslog_message" => "pam_unix\(sshd:session\): session closed for user %{USERNAME:user}" }
                add_tag => [ "logout", "pam" ]
                tag_on_failure => []
            }
            grok {
                match => { "syslog_message" => "Received disconnect from %{IP:clientip}:" }
                tag_on_failure => []
            }
        }
    }
}

output {
    if [type] == "cron" {
        elasticsearch {
            index => "cron-%{+YYYY.MM.dd}"
            template => "/etc/logstash/templates/cron.json"
            template_name => "cron"
            template_overwrite => true
        }
    } else if [type] == "kubernetes" {
        elasticsearch {
            index => "kubernetes-%{+YYYY.MM.dd}"
            template => "/etc/logstash/templates/kubernetes.json"
            template_name => "kubernetes"
            template_overwrite => true
        }
    } else if [type] == "ntp" {
        elasticsearch {
            index => "ntp-%{+YYYY.MM.dd}"
            template => "/etc/logstash/templates/ntp.json"
            template_name => "ntp"
            template_overwrite => true
        }
    } else if [type] == "selinux" {
        elasticsearch {
            index => "selinux-%{+YYYY.MM.dd}"
            template => "/etc/logstash/templates/selinux.json"
            template_name => "selinux"
            template_overwrite => true
        }
    } else if [type] == "syslog" or [type] == "systemd" {
        if "_grok_postfix_success" in [tags] {
            elasticsearch {
                index => "postfix-%{+YYYY.MM.dd}"
                template => "/etc/logstash/templates/postfix.json"
                template_name => "postfix"
                template_overwrite => true
            }
        } else if [program] != "sh" {
            elasticsearch {
                index => "syslog-%{+YYYY.MM.dd}"
                template => "/etc/logstash/templates/syslog.json"
                template_name => "syslog"
                template_overwrite => true
            }
        }
    } else if [type] == "yum" {
        elasticsearch {
            index => "yum-%{+YYYY.MM.dd}"
            template => "/etc/logstash/templates/yum.json"
            template_name => "yum"
            template_overwrite => true
        }
    }
}
